class Student:

    def __init__(self, name, surname, gender):
        self.name = name
        self.surname = surname
        self.gender = gender
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}

    def rate_lecturer(self, lecturer, course, grade):
        if isinstance(lecturer, Lecturer) and course in self.courses_in_progress:
            if course in lecturer.grades:
                lecturer.grades[course] += [grade]
            else:
                lecturer.grades[course] = [grade]
        else:
            return 'Ошибка'

    def average_grades_st(self):
        count = 0
        sum_grades = 0
        for course in self.grades.values():
            sum_grades += sum(course)
            count += len(course)
        return sum_grades / count

    def __str__(self):
        return f' Имя студента: {self.name}\n Фамилия студента: {self.surname}\n Средняя оценка за домашнее задание студента: {self.average_grades_st()}\n Курсы в процессе изучения студентом: {self.courses_in_progress}\n Завершенные студентом курсы: {self.finished_courses}\n'

    def __lt__(self, other_student):
        res = self.average_grades_st() < other_student.average_grades_st()
        return res

class Mentor:

    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.courses_attached = []

class Lecturer(Mentor):

    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.grades = {}

    def average_grades_lec(self):
        sum_grades = 0
        count = 0
        for course in self.grades.values():
            sum_grades += sum(course)
            count += len(course)
        return sum_grades / count

    def __str__(self):
        return f' Имя лектора: {self.name}\n Фамилия лектора: {self.surname}\n Средняя оценка за лекции: {self.average_grades_lec()}\n'

    def __lt__(self, other_lecturer):
        res = self.average_grades_lec() < other_lecturer.average_grades_lec()
        return res

class Reviewer(Mentor):

    def rate_hw(self, student, course, grade):
        if isinstance(student, Student) and course in self.courses_attached and course in student.courses_in_progress:
            if course in student.grades:
                student.grades[course] += [grade]
            else:
                student.grades[course] = [grade]
        else:
            return 'Ошибка'

    def __str__(self):
        return f' Имя проверяющего: {self.name}\n Фамилия проверяющего: {self.surname}\n'

student_1 = Student('Grisha', 'Kolomeets', 'your_gender')
student_1.finished_courses += ['Git']
student_1.courses_in_progress += ['Python']

student_2 = Student('Lyn', 'It', 'man')
student_2.finished_courses += ['Git']
student_2.courses_in_progress += ['Python']

reviewer_1 = Reviewer('Svetlana', 'Kim')
reviewer_1.courses_attached += ['Python']
reviewer_1.courses_attached += ['Git']
reviewer_1.rate_hw(student_1, 'Git', 3)
reviewer_1.rate_hw(student_1, 'Git', 7)
reviewer_1.rate_hw(student_1, 'Git', 9)
reviewer_1.rate_hw(student_1, 'Python', 9)
reviewer_1.rate_hw(student_1, 'Python', 8)

reviewer_1.rate_hw(student_2, 'Git', 6)
reviewer_1.rate_hw(student_2, 'Git', 9)
reviewer_1.rate_hw(student_2, 'Git', 3)
reviewer_1.rate_hw(student_2, 'Python', 8)
reviewer_1.rate_hw(student_2, 'Python', 8)

lecturer_1 = Lecturer('Sasha', 'Ovechkin')
lecturer_1.courses_attached += ['Git']
lecturer_1.courses_attached += ['Python']

lecturer_2 = Lecturer('Grant', 'Varakin')
lecturer_2.courses_attached += ['Git']
lecturer_2.courses_attached += ['Python']

student_1.rate_lecturer(lecturer_1, 'Git', 8)
student_1.rate_lecturer(lecturer_1, 'Python', 7)

student_2.rate_lecturer(lecturer_2, 'Git', 4)
student_2.rate_lecturer(lecturer_2, 'Python', 5)

student_list = [student_1, student_2]

def average_score_for_students(student_list, course):
    total_sum = 0
    for student in student_list:
        for c, grades_list in student.grades.items():
            if c == course:
                total_sum += sum(grades_list) / len(grades_list)
    return round(total_sum / len(student_list), 2)

lecturer_list = [lecturer_1, lecturer_2]

def average_score_for_lecturer(lecturer_list, course):
    total_sum = 0
    for lecturer in lecturer_list:
        for c, grades_list in lecturer.grades.items():
            if c == course:
                total_sum += sum(grades_list) / len(grades_list)
    return round(total_sum / len(lecturer_list), 2)

print(average_score_for_students(student_list, 'Python'))

print(average_score_for_lecturer(lecturer_list, 'Python'))

print(reviewer_1)

print(lecturer_1 > lecturer_2)
